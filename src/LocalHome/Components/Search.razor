@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavManager
    <div class="search-container">
        <div class="fakebox-search-icon"></div>
        @*The oninput is needed to enable getting the text value w/o the text box losing focus*@
        <input class="search-google" id="inputTextSearchFilter" @bind="SearchText" type="text"
               placeholder="Search or filter"
               @oninput="EventCallback.Factory.CreateBinder<string>(this, __value => SearchText = __value, SearchText)"
               @onkeypress="KeyWasPressed"
               @onkeydown="KeyWasPressed"/>
        <select class="cleanSelect" @bind="SearchProvider">
            <option value="google">Google</option>
            <option value="github">GitHub</option>
        </select>
    </div>

@code {
    string SearchText { get; set; }
    string SearchProvider { get; set; }
    [Parameter]
    public EventCallback<ChangeEventArgs> OnFilter { get; set; }

    protected override void OnAfterRender(bool firstRender) {
        base.OnAfterRender(firstRender);
        GetFocus("inputTextSearchFilter");
    }

    public async Task KeyWasPressed(KeyboardEventArgs args)
    {
        await DoFilter(SearchText);
        if (args.Code == "Enter")
        {
            PerformSearch(SearchText);
        }
    }
    public async Task DoFilter(string searchText) {
        Console.WriteLine($"searchText: '{searchText}'");
        await OnFilter.InvokeAsync(new ChangeEventArgs { Value = SearchText });
    }
    public void PerformSearch(string searchText)
    {
        if(SearchProvider == "github") {
            NavManager.NavigateTo($"https://github.com/search?q={searchText}");
        }
        else {
            // default to google
            NavManager.NavigateTo($"https://www.google.com/search?q={searchText}");
        }
    }
    public void GetFocus(string controlId) {
        // inputTextSearchFilter
        var obj = JSRuntime.InvokeAsync<string>(
            "MySetFocus", controlId);
    }
}
