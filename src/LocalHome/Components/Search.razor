@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Hosting

@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject ISearchProviderJsonReader searchReader
@inject IWebHostEnvironment WebHostEnv

    <div class="search-container">
        <div class="fakebox-search-icon"></div>
        @*The oninput is needed to enable getting the text value w/o the text box losing focus*@
        <input class="search-google" id="inputTextSearchFilter" @bind="SearchText" type="text"
               placeholder="Search or filter"
               @oninput="EventCallback.Factory.CreateBinder<string>(this, __value => SearchText = __value, SearchText)"
               @onkeypress="KeyWasPressed"
               @onkeydown="KeyWasPressed" />
        @if (SearchProviders != null && SearchProviders.Count > 0) {
        @* TODO: Change this to InputSelect and see if the bug where the value is not bound initially is fixed *@
        <select class="cleanSelect" id="searchselect" @bind="SearchFormatUrl">
            @foreach (var sp in SearchProviders)
            {
                <option value="@(sp.SearchUrl)">@(sp.DisplayName)</option>
            }
        </select>
        }
        </div>

@code {
    string SearchText { get; set; }
    string SearchFormatUrl { get; set; }
    List<SearchProvider> SearchProviders { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnFilter { get; set; }

    protected override async Task OnInitializedAsync() {
        SearchProviders = await GetSearchProvidersAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        GetFocus("inputTextSearchFilter");
    }

    public async Task KeyWasPressed(KeyboardEventArgs args)
    {
        await DoFilter(SearchText);
        if (args.Code == "Enter")
        {
            PerformSearch(SearchText);
        }
    }
    public async Task DoFilter(string searchText)
    {
        Console.WriteLine($"searchText: '{searchText}'");
        await OnFilter.InvokeAsync(new ChangeEventArgs { Value = SearchText });
    }
    public void PerformSearch(string searchText)
    {
        if (SearchFormatUrl == null) { SearchFormatUrl = "https://www.google.com/search?q={0}"; }
        NavManager.NavigateTo(string.Format(SearchFormatUrl, searchText));
    }
    public void GetFocus(string controlId)
    {
        // inputTextSearchFilter
        var obj = JSRuntime.InvokeAsync<string>(
            "MySetFocus", controlId);
    }
    private async Task<List<SearchProvider>> GetSearchProvidersAsync()
    {
        // TODO: get from some service
        string filepath = System.IO.Path.Combine(WebHostEnv.WebRootPath, "search.json");
        return await searchReader.GetSearchProvidersFromFileAsync(filepath);
    }
}
